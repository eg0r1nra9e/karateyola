// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = "file:../database/dev.db"
}

// Населенный пункт
model City {
    id     Int     @id @default(autoincrement())
    region String
    city   String?
    teams  Team[]
}

// Команда
model Team {
    id         Int       @id @default(autoincrement())
    name       String // Наименование команды
    cityId     Int? // Идентификатор наспеленного пункта
    city       City?     @relation(fields: [cityId], references: [id])
    athletes   Athlete[]
    created_at DateTime  @default(now())
    updated_at DateTime  @updatedAt

    @@unique([name, cityId])
}

// Спортсмен
model Athlete {
    id            Int           @id @default(autoincrement())
    lastName      String // Фамилия спортсмена
    firstName     String // Имя спортсмена
    dateOfBirth   DateTime // Дата рождения спортсмена
    teamId        Int? // Идентификатор команды
    team          Team?         @relation(fields: [teamId], references: [id])
    gender        String // Пол спортсмена
    weight        Int // Вес спортсмена
    created_at    DateTime      @default(now())
    updated_at    DateTime      @updatedAt
    firstPlayers  Duel[]        @relation(name: "firstPlayers")
    secondPlayers Duel[]        @relation(name: "secondPlayers")
    winners       Duel[]        @relation(name: "winners")
    gameAthlete   GameAthlete[]

    @@unique([firstName, lastName, dateOfBirth, teamId])
}

// Дисциплина
model Competition {
    id               Int               @id @default(autoincrement())
    name             String // Наименование дисциплины
    created_at       DateTime          @default(now())
    updated_at       DateTime          @updatedAt
    gameCompetitions GameCompetition[]
}

//Категория
model Category {
    id             Int            @id @default(autoincrement())
    name           String // Наименование категории
    time           Int // Время боя
    created_at     DateTime       @default(now())
    updated_at     DateTime       @updatedAt
    gameCategories GameCategory[]
}

// Соревнование
model Game {
    id           Int               @id @default(autoincrement())
    name         String? //Название соревнования.
    startDate    DateTime? // Дата начала
    endDate      DateTime? // Дата окночания
    status       String // Статус соревнования
    competitions GameCompetition[] // Дисциплины соревнования
    created_at   DateTime          @default(now())
    updated_at   DateTime          @updatedAt
}

// Дисциплина конкретной игры
model GameCompetition {
    id            Int            @id @default(autoincrement())
    gameId        Int
    game          Game           @relation(fields: [gameId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    competition   Competition?   @relation(fields: [competitionId], references: [id])
    competitionId Int?
    categories    GameCategory[]

    @@unique([gameId, competitionId])
}

// Категория конкретной дисциплины конкретной игры
model GameCategory {
    id                Int             @id @default(autoincrement())
    gameCompetitionId Int
    gameCompetition   GameCompetition @relation(fields: [gameCompetitionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    categoryId        Int?
    category          Category?       @relation(fields: [categoryId], references: [id])
    standings         Standing[]
    created_at        DateTime        @default(now())
    updated_at        DateTime        @updatedAt
    athletes          GameAthlete[]

    @@unique([gameCompetitionId, categoryId])
}

// Спортсмены, учавствующие в соревнованиях
model GameAthlete {
    id             Int          @id @default(autoincrement())
    gameCategoryId Int
    gameCategory   GameCategory @relation(fields: [gameCategoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    athleteId      Int
    athlete        Athlete      @relation(fields: [athleteId], references: [id])
    created_at     DateTime     @default(now())
    updated_at     DateTime     @updatedAt

    @@unique([gameCategoryId, athleteId])
}

// Турнирная таблица
model Standing {
    id             Int          @id @default(autoincrement())
    duels          Duel[] // Поединки
    gameCategoryId Int
    gameCategory   GameCategory @relation(fields: [gameCategoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    close          Boolean?
    created_at     DateTime     @default(now())
    updated_at     DateTime     @updatedAt
}

// Поединок
model Duel {
    id             Int      @id @default(autoincrement())
    firstPlayerId  Int // Первый участник
    firstPlayer    Athlete  @relation(fields: [firstPlayerId], references: [id], name: "firstPlayers")
    secondPlayerId Int? // Второй участник
    secondPlayer   Athlete? @relation(fields: [secondPlayerId], references: [id], name: "secondPlayers")
    winnerId       Int? // Победитель
    winner         Athlete? @relation(fields: [winnerId], references: [id], name: "winners")
    standingId     Int // Турнирная таблица
    standing       Standing @relation(fields: [standingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    created_at     DateTime @default(now())
    updated_at     DateTime @updatedAt
}
