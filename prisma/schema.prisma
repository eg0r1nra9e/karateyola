// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = "file:../database/dev.db"
}

// Населенный пункт
model City {
    id     Int     @id @default(autoincrement())
    region String
    city   String?
    teams  Team[]
}

// Команда
model Team {
    id         Int       @id @default(autoincrement())
    name       String // Наименование команды
    cityId     Int? // Идентификатор наспеленного пункта
    city       City?     @relation(fields: [cityId], references: [id])
    athletes   Athlete[]
    created_at DateTime  @default(now())
    updated_at DateTime  @updatedAt

    @@unique([name, cityId])
}

// Спортсмен
model Athlete {
    id          Int      @id @default(autoincrement())
    lastName    String // Фамилия спортсмена
    firstName   String // Имя спортсмена
    dateOfBirth DateTime // Дата рождения спортсмена
    teamId      Int? // Идентификатор команды
    team        Team?    @relation(fields: [teamId], references: [id])
    gender      String // Пол спортсмена
    weight      Int // Вес спортсмена
    created_at  DateTime @default(now())
    updated_at  DateTime @updatedAt
    onePlayers  Duel[]   @relation(name: "onePlayers")
    twoPlayers  Duel[]   @relation(name: "twoPlayers")
    winners     Duel[]   @relation(name: "winners")

    @@unique([firstName, lastName, dateOfBirth, teamId])
}

// Дисциплина
model Competition {
    id               Int               @id @default(autoincrement())
    name             String // Наименование дисциплины
    created_at       DateTime          @default(now())
    updated_at       DateTime          @updatedAt
    gameCompetitions GameCompetition[]
}

//Категория
model Category {
    id             Int            @id @default(autoincrement())
    name           String // Наименование категории
    time           Int // Время боя
    created_at     DateTime       @default(now())
    updated_at     DateTime       @updatedAt
    gameCategories GameCategory[]
}

// Соревнование
model Game {
    id               Int               @id @default(autoincrement())
    name             String? //Название соревнования.
    startDate        DateTime? // Дата начала
    endDate          DateTime? // Дата окночания
    status           String // Статус соревнования
    gameCompetitions GameCompetition[] // Дисциплины соревнования
    created_at       DateTime          @default(now())
    updated_at       DateTime          @updatedAt
}

// Дисциплина конкретной игры
model GameCompetition {
    id             Int            @id @default(autoincrement())
    gameId         Int
    game           Game           @relation(fields: [gameId], references: [id])
    competition    Competition?   @relation(fields: [competitionId], references: [id])
    competitionId  Int?
    gameCategories GameCategory[]
}

// Категория конкретной дисциплины конкретной игры
model GameCategory {
    id                Int             @id @default(autoincrement())
    gameCompetitionId Int
    gameCompetition   GameCompetition @relation(fields: [gameCompetitionId], references: [id])
    categoryId        Int?
    category          Category?       @relation(fields: [categoryId], references: [id])
    standing          Standing[]
    created_at        DateTime        @default(now())
    updated_at        DateTime        @updatedAt
}

// Турнирная таблица
model Standing {
    id           Int          @id @default(autoincrement())
    duels        Duel[] // Поединки
    categoryId   Int // Категория
    gameCategory GameCategory @relation(fields: [categoryId], references: [id])
    created_at   DateTime     @default(now())
    updated_at   DateTime     @updatedAt
}

// Поединок
model Duel {
    id          Int      @id @default(autoincrement())
    onePlayerId Int // Первый участник
    onePlayer   Athlete  @relation(fields: [onePlayerId], references: [id], name: "onePlayers")
    twoPlayerId Int // Второй участник
    twoPlayer   Athlete  @relation(fields: [twoPlayerId], references: [id], name: "twoPlayers")
    winnerId    Int // Победитель
    winner      Athlete  @relation(fields: [winnerId], references: [id], name: "winners")
    standingId  Int // Ткртнирная таблица
    standing    Standing @relation(fields: [standingId], references: [id])
    created_at  DateTime @default(now())
    updated_at  DateTime @updatedAt
}
